package com.learnkafka.service;

import java.util.Optional;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.RecoverableDataAccessException;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.learnkafka.entity.LibraryEvent;
import com.learnkafka.jpa.LibraryEventsRepository;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class LibraryEventsService {
	
	@Autowired
	ObjectMapper objectMapper; 
	
	@Autowired
	private LibraryEventsRepository repo;
	
	public void processLibraryEvent(ConsumerRecord<Integer, String> consumerRecord) throws JsonMappingException, JsonProcessingException {
		
		LibraryEvent libraryEvent = objectMapper.readValue(consumerRecord.value(), LibraryEvent.class);
		
		log.info("libraryEvent : {} ", libraryEvent);
		
		if(libraryEvent.getLibraryEventType() != null && libraryEvent.getLibraryEventId()==000) {
			
			throw new RecoverableDataAccessException("Temporaray Network Issue");
		}
		
		switch(libraryEvent.getLibraryEventType()) {
			
		case NEW:
			save(libraryEvent);
			break;
		
		case UPDATE:
			validate(libraryEvent);
			save(libraryEvent);
			break;
			
		default:
			log.info("Invalid Library Event Type");
		}
		
	}

	private void validate(LibraryEvent libraryEvent) {
		if(null == libraryEvent.getLibraryEventId()) {
			throw new IllegalArgumentException("Library Event Id is missing");
		}
		
		Optional<LibraryEvent> findById = repo.findById(libraryEvent.getLibraryEventId());
		
		if(! findById.isPresent()) {
			throw new IllegalArgumentException("Not a valid Library Event");
		}
		log.info("Validation is successful for the library Event: {} ", findById.get());
	}

	private void save(LibraryEvent libraryEvent) {
		libraryEvent.getBook().setLibraryEvent(libraryEvent);
		repo.save(libraryEvent);
		log.info("Successfully Persisted the library event {} ", libraryEvent);
	}

}
